#!/usr/bin/env bash


OS_NAME="$(uname -s)"
case "${OS_NAME}" in
    Darwin*)
        realpath() {
            [[ $1 = /* ]] && echo "$1" || echo "${PWD}/${1#./}"
        }
    ;;
esac


SCRIPT_DIR=$(realpath "$(dirname "${0}")")
VENV_DIR="${SCRIPT_DIR}/.venv"
ARGS=()
UNIT=
E2E=
SKIP_BUILD=
# GOOG_FOLDER_ID="${GOOGLE_DRIVE_FOLDER_ID}"
# GOOG_SERVICE_ACC_KEY="${GOOGLE_SERVICE_ACC_KEY}"

usage() {
cat << EOF
Run unit tests or e2e.

Usage:
    ${0} [OPTIONS] [EXTRA_ARGS]

All the EXTRA_ARGS are passed to pytest

Options:
    --help                Show help message
    --unit                Run unit tests
    --e2e                 Run e2e tests
    --skip-build          Skip building dist files
    --folder-id FOLDER_ID Google drive folder id to use as remote storage for e2e tests. 
                          If not given read from GOOGLE_DRIVE_FOLDER_ID environment variable.
    --key KEY_FN          Path to google service account key file in json format
                          If not given read from GOOGLE_SERVICE_ACC_KEY environment variable.
EOF
}

# set -eux

while [ "${#}" -gt 0 ]; do
    case "${1}" in
        -h|--help)
            usage
            exit
            ;;

        --unit)
            UNIT=1
            ;;

        --e2e)
            E2E=1
            ;;

        --skip-build)
            SKIP_BUILD=1
            ;;
        
        --folder-id)
            shift
            GOOGLE_DRIVE_FOLDER_ID="${1}"
            ;;

        --key)
            shift
            GOOGLE_SERVICE_ACC_KEY="${1}"
            ;;

        *)
            ARGS+=("${1}")
            ;;
    esac
    
   shift
done

set -eu

if [ -z "${UNIT}" ] && [ -z "${E2E}" ]; then
    echo -e '\033[31mEither --e2e or --unit or both are required\033[0m' > /dev/stderr
    usage
    exit 1
fi


if [ -n "${E2E}" ] && ([ -z "${GOOGLE_DRIVE_FOLDER_ID+x}" ] || [ -z "${GOOGLE_SERVICE_ACC_KEY+x}" ]); then
    echo -e '\033[31mGoogle drive folder id (--folder-id) and service account key file (--key) are required\033[0m' > /dev/stderr
    usage
    exit 1
fi

on_exit() {
    if [ -n "${E2E}" ]; then
        docker compose -f "${E2E_COMPOSE_FN}" rm --stop --force
    fi
}

trap on_exit EXIT

if [ -n "${UNIT}" ]; then
    if [ -d "${VENV_DIR}" ]; then
        source "${VENV_DIR}/bin/activate"
    else
        python3 -m venv "${VENV_DIR}" && \
        source "${VENV_DIR}/bin/activate" && \
        pip install -r requirements.txt
    fi

    echo -e "\033[0;36mRunning unit tests...\033[0m"
    PYTHONPATH="${SCRIPT_DIR}/src" pytest "${SCRIPT_DIR}/src" "${ARGS[@]}"
fi

if [ -n "${E2E}" ]; then
    if [ -z "${SKIP_BUILD}" ]; then
        "${SCRIPT_DIR}/build"
    fi
    WHEEL_FULL_FN="$(ls ${SCRIPT_DIR}/dist/*.whl)"
    E2E_TESTS_DIR="${SCRIPT_DIR}/e2e-tests"
    E2E_COMPOSE_FN="${E2E_TESTS_DIR}/docker-compose.yml"
    E2E_TEMP_DIR="${E2E_TESTS_DIR}/tests/.temp"
    rm -rf "${E2E_TEMP_DIR}"
    mkdir -p "${E2E_TEMP_DIR}"
    WHEEL_FN="$(basename "${WHEEL_FULL_FN}")"
    cp "${WHEEL_FULL_FN}" "${E2E_TEMP_DIR}/${WHEEL_FN}"

    docker compose -f "${E2E_COMPOSE_FN}" build --build-arg "WHEEL_FN=${WHEEL_FN}"
    docker compose -f "${E2E_COMPOSE_FN}" run --rm --name cobra-e2e-tests \
        --volume "$(realpath ${GOOGLE_SERVICE_ACC_KEY}):/test/.key.json:ro" \
        --env "GOOGLE_DRIVE_FOLDER_ID=${GOOGLE_DRIVE_FOLDER_ID}" cobra-e2e-tests \
        dumb-init bash -c "./wait-for-it.sh cobra-e2e-tests-dind:2376 -t 30; pytest ${ARGS[*]}"
fi
